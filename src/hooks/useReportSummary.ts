import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

export interface ReportSummary {
  reportsThisMonth: number;
  complianceScore: number;
  pendingReports: number;
  autoGeneratedPercent: number;
}

/**
 * A hook to fetch aggregated data for the reporting summary cards.
 */
export const useReportSummary = () => {
  const { user } = useAuth();
  const [summary, setSummary] = useState<ReportSummary | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchSummary = useCallback(async () => {
    if (!user) {
      setLoading(false);
      return;
    }
    try {
      setLoading(true);
      setError(null);

      // In a real app, these would be complex queries. We will simulate them for now.
      // For example, reportsThisMonth would count reports generated in the current month.
      const { count: transactionCount } = await supabase
        .from('transactions')
        .select('*', { count: 'exact', head: true })
        .or(`buyer_id.eq.${user.id},seller_id.eq.${user.id}`);
        
      // Mock data based on some real data points
      const summaryData: ReportSummary = {
        reportsThisMonth: transactionCount ?? 0,
        complianceScore: 98, // This would be calculated based on compliance status
        pendingReports: 1,   // This would query tasks or deadlines
        autoGeneratedPercent: 87, // Percentage of automated reports
      };

      setSummary(summaryData);
    } catch (err: any) {
      console.error("Error fetching report summary:", err);
      setError("Could not load report summary data.");
    } finally {
      setLoading(false);
    }
  }, [user]);

  useEffect(() => {
    fetchSummary();
  }, [fetchSummary]);

  return { summary, loading, error };
};
