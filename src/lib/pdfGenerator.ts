import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { UserProfile } from '@/hooks/useUserWallet';
import { UserMetrics } from '@/hooks/useUserMetrics';
import { Transaction } from '@/hooks/useTransactions';

// Extend the jsPDF type to include the autoTable method from the plugin
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface ReportData {
  profile: UserProfile | null;
  metrics: UserMetrics | null;
  transactions: Transaction[];
}

/**
 * Generates a comprehensive PDF report from the user's data,
 * now with robust checks for null or undefined values.
 */
export const generatePdfReport = (data: ReportData) => {
  const { profile, metrics, transactions } = data;
  const doc = new jsPDF();
  
  // 1. Add Header
  doc.setFontSize(20);
  doc.text("CarbonFlow Emissions & Compliance Report", 14, 22);
  doc.setFontSize(11);
  doc.text(`Industry: ${profile?.industry_name || 'N/A'}`, 14, 30);
  doc.text(`Report Generated: ${new Date().toLocaleDateString()}`, 14, 36);

  // 2. Add Summary Section
  doc.setFontSize(16);
  doc.text("Executive Summary", 14, 50);
  doc.autoTable({
    startY: 55,
    head: [['Metric', 'Value']],
    body: [
      // Use nullish coalescing (?? 0) to safely handle potentially null numbers
      ['Total GHG Emissions', `${(metrics?.total_ghg_emissions ?? 0).toLocaleString()} tCO₂e`],
      ['Available Carbon Credits', `${(metrics?.available_credits ?? 0).toLocaleString()}`],
      ['Last Month Emissions', `${(metrics?.last_month_ghg_emissions ?? 0).toLocaleString()} tCO₂e`],
      ['Wallet Balance', `₹${(profile?.wallet_balance ?? 0).toLocaleString()}`],
    ],
    theme: 'striped',
    headStyles: { fillColor: [22, 163, 74] }, // A green header color
  });

  // 3. Add Recent Transactions Table
  const lastY = (doc as any).lastAutoTable.finalY || 100;
  doc.setFontSize(16);
  doc.text("Recent Transaction History", 14, lastY + 15);
  doc.autoTable({
    startY: lastY + 20,
    head: [['Date', 'Type', 'Counterparty', 'Credits', 'Amount (INR)']],
    body: transactions.slice(0, 10).map(tx => {
      // Safely determine the transaction type and counterparty
      const isBuy = tx.buyer_id === profile?.id;
      const counterparty = isBuy ? tx.seller_industry_name : tx.buyer_industry_name;
      return [
        new Date(tx.created_at).toLocaleDateString(),
        isBuy ? 'Buy' : 'Sell',
        counterparty || 'N/A',
        tx.credits ?? 0,
        `₹${(tx.amount ?? 0).toLocaleString()}`
      ];
    }),
    theme: 'grid',
    headStyles: { fillColor: [22, 163, 74] },
  });
  
  // 4. Add Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(10);
    doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 25, doc.internal.pageSize.height - 10);
    doc.text("Confidential - Generated by CarbonFlow", 14, doc.internal.pageSize.height - 10);
  }

  // 5. Save the PDF
  doc.save(`CarbonReport_${profile?.industry_name || 'Report'}_${new Date().toISOString().split('T')[0]}.pdf`);
};
